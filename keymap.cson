# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:auto-indent'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'

'.editor:not(.mini)':
  'alt-cmd-l': 'editor:auto-indent'       # 自動インデント
  'alt-cmd-k': 'editor:toggle-soft-wrap'  # ペインの中で折り返す
  'alt-cmd-.': 'pane:split-right'         # ペイン分割（右側に新規ペイン）
  'alt-cmd-,': 'pane:split-down'          # ペイン分割（下側に新規ペイン）

'atom-text-editor':
  'ctrl-w': 'editor:move-to-end-of-word'
  'ctrl-q': 'editor:move-to-beginning-of-word'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on OS X and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * https://atom.io/docs/latest/hacking-atom-debugging#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
